{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart","text":""},{"location":"#welcome-to-bordertracer","title":"Welcome to BorderTracer","text":"<p>An advanced border-tracing algorithm that generalizes classical image segmentation techniques from pixel-based grids to arbitrary polygonal tilings, enabling contour detection in abstract adjacency graphs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>Comprehensive framework for abstract adjacencies</p> <p>The algorithm works for very general adjacency graphs on abstract polygonal tilings. These can be given by Freeman codes, computed from geometric properties of the tiling, or determined directly.</p> </li> <li> <p>Efficient tracing algorithms</p> <p>The algorithms have linear time complexity in the size of the object border. Initialization depends largely on the implementation, but the framework is scalable and versatile.</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"Quick installation<pre><code>!git clone https://github.com/tonamatos/BorderTracer.git\n%cd BorderTracer\nfrom tracing import BorderTracer\n</code></pre>"},{"location":"#some-examples-are-included-in-the-package","title":"Some examples are included in the package:","text":"Methods for producing examples<pre><code>from examples.objects import circular_object\nfrom visualization import plot_tiling\n</code></pre> <p>Tip</p> <p>Click on the tabs below to see the object and its computed border on different tiling graphs.</p> 4-adjacent squares8-adjacent squares3-adjacent triangles6-adjacent hexagons <pre><code>from examples.rectangular import RectangularTilingGraph\n\n# Create tiling and object\nG = RectangularTilingGraph()\nG.create_adjacencies(adjacency=\"4-adj\")\nC = circular_object(G)\n\n# Apply the tracing algorithm\nbd = BorderTracer(G, C)\nresult = bd.trace_border()\nG.highlight(result, color=\"indianred\")\nplot_tiling(G)\n</code></pre> <p></p> <pre><code>from examples.rectangular import RectangularTilingGraph\n\n# Create tiling\nG = RectangularTilingGraph()\nG.create_adjacencies(adjacency=\"8-adj\")\nC = circular_object(G)\n\n# Apply the tracing algorithm\nbd = BorderTracer(G, C)\nresult = bd.trace_border()\nG.highlight(result, color=\"indianred\")\nplot_tiling(G)\n</code></pre> <p></p> <pre><code>from examples.triangular import TriangularTilingGraph\n\n# Create tiling\nG = RectangularTilingGraph()\nG.create_adjacencies(adjacency=\"3-adj\")\nC = circular_object(G)\n\n# Apply the tracing algorithm\nbd = BorderTracer(G, C)\nresult = bd.trace_border()\nG.highlight(result, color=\"indianred\")\nplot_tiling(G)\n</code></pre> <p></p> <pre><code>from examples.hexagonal import HexagonalTilingGraph\n\n# Create tiling\nG = RectangularTilingGraph()\nG.create_adjacencies(adjacency=\"6-adj\")\nC = circular_object(G)\n\n# Apply the tracing algorithm\nbd = BorderTracer(G, C)\nresult = bd.trace_border()\nG.highlight(result, color=\"indianred\")\nplot_tiling(G)\n</code></pre> <p></p>"},{"location":"#references","title":"References","text":"<p>This framework was developed by Tonatiuh Matos-Wiederhold as part of the upcoming research paper:</p> <p>Matos-Wiederhold, T., Wiederhold, P., Border tracing in oriented adjacency graphs of polygonal tilings with application to objects made of rectangular, triangular or hexagonal tiles, submitted to Theoretical Computer Science, 2025.</p>"}]}